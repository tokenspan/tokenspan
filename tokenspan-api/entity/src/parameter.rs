//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.10

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "parameter")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub model_id: Uuid,
    pub task_version_id: Uuid,
    pub name: String,
    #[sea_orm(column_type = "Float")]
    pub temperature: f32,
    pub max_tokens: i32,
    pub stop_sequences: Vec<String>,
    #[sea_orm(column_type = "Float")]
    pub top_p: f32,
    #[sea_orm(column_type = "Float")]
    pub frequency_penalty: f32,
    #[sea_orm(column_type = "Float")]
    pub presence_penalty: f32,
    pub extra: Option<Json>,
    pub created_at: DateTime,
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::model::Entity",
        from = "Column::ModelId",
        to = "super::model::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Model,
    #[sea_orm(
        belongs_to = "super::task_version::Entity",
        from = "Column::TaskVersionId",
        to = "super::task_version::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    TaskVersion,
}

impl Related<super::model::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Model.def()
    }
}

impl Related<super::task_version::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TaskVersion.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
